/* benri-template v20.3: fix button-container-3spans */

//ドメインURL
$domain-url: "https://benrineko.com";
//container
$container-margin: 10px;
$container-max-width: 1400px;
//header-logo
$header-height: 50px;
$logo-height: $header-height;
$logo-width: $logo-height * 3;
//side
$side-width: 300px;
$side-anime-time: 0.2s;
//フォント
$font-family: "Hiragino Mincho ProN", "Hiragino Mincho Pro", "MS Mincho",
  "Meiryo", serif;
$font-gothic-family: "Hiragino Kaku Gothic ProN", "Hiragino Kaku Gothic Pro",
  "MS Gothic", "Meiryo UI", sans-serif;
$font-size-large: 1.8rem;
$font-size-normal: 1rem;
$font-size-small: 0.9rem;
$font-size-button: 1.3rem;
//カラー
$red: #b71c1c;
$blue: #0d47a1;
// テーマカラー
$standard-bg-color: #fff;
$standard-color: #444;
//ジャンルの色
$life-color: #8bc34a;
$develop-color: #7a6a89;
// デバイス
$retina: "only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2)";
$phone-max-width: 480px; 
$tablet-max-width: 768px; 
$desktop-max-width: 1024px; 
$large-desktop-max-width: 1200px;

/*=========  ===============*/
@mixin lessThan($device) {
  @if $device == phone {
    @media (max-width: $phone-max-width) { @content; }
  } @else if $device == tablet {
    @media (max-width: $tablet-max-width) { @content; }
  } @else if $device == desktop {
    @media (max-width: $desktop-max-width) { @content; }
  } @else if $device == ldesktop {
    @media (max-width: $ldesktop-max-width) { @content; }
  } @else {
    @error "Invalid device provided. Please use 'phone', 'tablet', 'desktop', or 'ldesktop'.";
  }
}
@mixin greaterThan($device) {
  @if $device == phone {
    @media (min-width: 0 + 1px) { @content; }
  } @else if $device == tablet {
    @media (min-width: $phone-max-width + 1px) { @content; }
  } @else if $device == desktop {
    @media (min-width: $tablet-max-width + 1px) { @content; }
  } @else if $device == ldesktop {
    @media (min-width: $desktop-max-width + 1px) { @content; }
  } @else {
    @error "Invalid device provided. Please use 'phone', 'tablet', 'desktop', or 'ldesktop'.";
  }
}
@mixin visible-element($height: 100%) {
  height: $height;
  opacity: 1;
  overflow: visible;
  @content;
}
@mixin hidden-element {
  height: 0; //widthはアニメで型崩れ
  opacity: 0; //display: none;以外ならキーボード操作に対応できる
  overflow: hidden;
  @content;
}
@mixin zero-bezel {
  margin: 0;
  padding: 0;
  @content;
}
@mixin size($height, $width: null) {
  @if $width == null{ $width: $height;}
  height: $height;
  width: $width;
  @content;
}
// @mixin zero-size {//削除予定
//   width: 0;
//   height: 0;
//   @content;
// }
// @mixin full-size {//削除予定
//   width: 100%;
//   height: 100%;
//   @content;
// }
// @mixin custom-size($height, $width: null) {//削除予定
//   @if $width == null{ $width: $height;}
//   height: $height;
//   width: $width;
//   @content;
// }
@mixin position($top: null, $right: null, $bottom: null, $left: null) {
  @if $top { top: $top;}
  @if $right {right: $right;}
  @if $bottom {bottom: $bottom;}
  @if $left {left: $left;}
}
@mixin fixed($top: null, $right: null, $bottom: null, $left: null) {
  position: fixed; //固定位置
  @include position($top, $right, $bottom, $left);
  @content;
}
@mixin relative($top: null, $right: null, $bottom: null, $left: null) {
  position: relative; //相対位置（本来の位置を視点にします。）
  @include position($top, $right, $bottom, $left);
  @content;
}
@mixin absolute($top: null, $right: null, $bottom: null, $left: null) {
  position: absolute; //絶対位置（親の位置を視点にします。擬似要素などで活躍。）
  @include position($top, $right, $bottom, $left);
  @content;
}
@mixin flex-center($direction: row, $gap: 0) {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: $gap;
  @if $direction == column {
    flex-direction: column;
  }
  @content;
}
@mixin flex-align($align: null) {
  display: flex;
  @if $align == start {
    align-items: flex-start;
  } @else if $align == end {
    align-items: flex-end;
  } @else if $align == center {
    align-items: center;
  } @else if $align == baseline {
    align-items: baseline;
  } @else {
  }
}
@mixin flex-between($direction: row, $align: null) {
  @include flex-align($align);
  justify-content: space-between; //間のスペースが均等
  @if $direction == column {
    flex-direction: column;
  }
  @content;
}
@mixin flex-around($direction: row, $align: null) {
  @include flex-align($align);
  justify-content: space-around; //前後スペースが均等
  @if $direction == column {
    flex-direction: column;
  }
  @content;
}
@mixin ad($height: 300px, $width: null) {
  @include zero-bezel;
  @include size($height, $width);//custom-size
  @include flex-center(column){
    justify-content: start;
  }
  @include standard-text-bg-colors;
  p {
    margin: 0 auto;
    padding: 0 auto;
    text-align: center;
  }
  @content;
}
@mixin flat-radius($border-radius: 4px) {
  border: none;
  border-radius: $border-radius;
  @content;
}
@mixin img($height, $width, $image-url, $retina-url: false) {
  @include size($height, $width);//height: $height; width: $width;
  background-repeat: no-repeat;
  background-position: center;
  background-size: $width $height;
  background-image: url(#{$image-url});
  @if $retina-url {
    @media #{$retina} {
      background-image: url(#{$retina-url});
    }
  }
  @content;
}
@mixin sankaku($direction: up, $color: null) {
  display: inline-block; //横向きに必要
  content: "\25B2";//"▲";
  @if $direction == down {
    content: "\25BC";//"▼";
  } @else if $direction == right {
    content: "\25BC"; //"▼";を回転（特殊文字を避ける）
    transform: rotate(270deg);
    padding-top: 0.08rem;
  } @else if $direction == left {
    content: "\25B2"; //"▲";を回転（特殊文字を避ける）
    transform: rotate(270deg);
    padding-top: 0.08rem;
  }
  @if $color != null {
    color: $color;
  }
  @content;
}
@mixin font($family, $size, $line: normal, $spacing: normal) {
  font-family: $family;
  font-size: $size;
  line-height: $line;
  letter-spacing: $spacing;
  @content;
}
@mixin standard-text-bg-colors($opt: no_reverse) {
  $bg-color: $standard-bg-color;
  $text-color: $standard-color;
  @if $opt == reverse {
    $bg-color: $standard-color;
    $text-color: $standard-bg-color;
  }
  background-color: $bg-color;
  color: $text-color;
  @content;
}
@mixin custom-text-bg-colors($text-color, $bg-color: null) {
  @if $bg-color == null{ $bg-color: $text-color;}
  background-color: $bg-color;
  color: $text-color;
  @content;
}
@mixin interactive-border($border-weight, $border-color, $original-border-color: null) {
  &:hover, &:active, &:focus{
    border: $border-weight solid $border-color;
  }
  @if $original-border-color {
    border: $border-weight solid $original-border-color;
  }
  @content;
}
@mixin circle($size, $color) {
  @include size($size);//width: $size; height: $size;
  border-radius: 50%;
  background-color: $color;
}
@mixin block-line($option: width, $value: 100%, $wait: 2px){
  display: block;
  content: "";
  @if $option == height{
    @include size($value, $wait);//custom-size
  } @else {
    @include size($wait, $value);//custom-size
  }
  @content;
}
@mixin design-button-setting($size){
  box-sizing: border-box;//指定のサイズの範囲に収まる様にします
  @include flat-radius(0px);//外装をフラットにします
  @include size($size);                   //custom-size
  position: relative;//内装がabsoliteになることを想定しています
  @include zero-bezel;//内容をフィットさせます
  @include flex-center;//内容を中央表示にします
  @content;
}
@mixin button-container-3spans($size, $color, $alignment: y, $shape: line) {
  $weit: 4px * ($size / 50px);//span3~4個を想定
  @include design-button-setting($size);
  @if $alignment == y {
    //y軸並び：横シマ（ハンバーガーボタン）
    .span-container{
      @include size(60%, 70%);//custom-size
      @include flex-center(column, 20%);
      span{
        display: block;
        @include size($weit, 100%);//c
        background-color: $color;
      }
    }
  } @else {
    //x軸並び：縦シマ
    .span-container{
      @include size(50%, 70%);//custom-size
      @include flex-center(row, 20%);
      span{
        display: block;
        @include size(100%, $weit);//c
        background-color: $color;
      }
    }
  }
  //ドットに変更
  @if $shape == dot{
    .span-container{
      @include size(70%);//custom-size
      span{
        @include size(100%);//full
        @include circle(7px * ($size / 50px), $color);
      }
    }
  }
  @content;
}
@mixin button-container-3spans-toClose($mark-size: 70%, $time: 0.5s, $color: null){
  .span-container{
    position: relative;
    @include size($mark-size);//custom-size
    span{
      @include absolute(45%, null, null, null);
      @if $color{ background-color: $color;}
    }
    > :nth-child(1){transform: rotate(45deg); transition: transform $time;}
    > :nth-child(2){ display: none;}
    > :nth-child(3){transform: rotate(-45deg); transition: transform $time;}
    // 「>」は直接の子孫を指定する時に使います。
  }
  @content;
}
@mixin title-burger($size, $color, $titlePosition: up) {
  @include design-button-setting($size);
  overflow: hidden;//飛び出たabsolute内装を隠します
  .title{
    width: 100%;//中央配置のため
    text-align: center;//中央配置のため
    color: $color;
    @if $titlePosition == up{
      @include absolute(-36%, null, null, null);
    } @else{
      @include absolute(null, null, -36%, null);
    }
  }
  .burger{
    @if $titlePosition == up{
      @include absolute(16%, null, null, null);
    } @else{
      @include absolute(null, null, 16%, null);
    }
    @include button-container-3spans($size, $color, y, line);
    //このデザイン比率をキープさせるためにabsoluteを採用します
  }
  @content;
//   【.titleの位置調整】
//   ご指定のフォントサイズ等で位置が変わるため、
//   フォントの行間設定を使って文字位置の微調整を行なってください。

//   【これらのコードは以下のHTML構造を想定しています】
//   <button>
//   <p class="title">TITLE</p>
//   <div class="burger">
//   <div class="span-container">
//   <span class="s1"></span>
//   <span class="s2"></span>
//   <span class="s3"></span>
//   </div>
//   </div>
//   </button>
}
@mixin clickable {
  //bodyに設定すると便利です。
  button,
  a,
  [role="button"],
  [role="link"],
  [role="tab"],
  [role="menuitem"],
  [contenteditable="true"],
  [draggable="true"] {
    cursor: pointer;
  }
  @content;
}
